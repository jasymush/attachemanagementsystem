"""New features for report review

Revision ID: df66e86bc8c5
Revises: b811740c7f24
Create Date: 2025-08-11 11:00:00.000000 # Your actual create date might differ

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'df66e86bc8c5'
down_revision = 'b811740c7f24' # Your previous revision ID
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add new columns allowing NULLs initially
    with op.batch_alter_table('report', schema=None) as batch_op:
        # Add status column, initially allowing NULL
        batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True, server_default='Pending')) # Add server_default here
        batch_op.add_column(sa.Column('supervisor_feedback', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('reviewed_by_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('reviewed_at', sa.DateTime(), nullable=True))
        # Add foreign key constraint
        batch_op.create_foreign_key(batch_op.f('fk_report_reviewed_by_id_user'), 'user', ['reviewed_by_id'], ['id'])

    # Step 2: Set default value for existing rows in 'status'
    # This must be done BEFORE making 'status' NOT NULL
    op.execute("UPDATE report SET status = 'Pending' WHERE status IS NULL")

    # Step 3: Alter 'status' column to be NOT NULL
    # (Only if it was initially nullable=True, as per the first add_column)
    with op.batch_alter_table('report', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default='Pending') # Use existing_server_default if you added it in Step 1

    # Add backref for User.reviewed_reports
    # This is a Python-level change, not a DB migration, but often part of the same conceptual change.
    # Alembic auto-generates relationship changes, but they might not explicitly be in here.
    # Ensure your User model has:
    # reviewed_reports = db.relationship('Report', foreign_keys='Report.reviewed_by_id', backref='reviewer', lazy=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('report', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_report_reviewed_by_id_user'), type_='foreignkey')
        batch_op.drop_column('reviewed_at')
        batch_op.drop_column('reviewed_by_id')
        batch_op.drop_column('supervisor_feedback')
        batch_op.drop_column('status')

    # ### end Alembic commands ###
